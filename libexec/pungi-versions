#!/usr/bin/env bash
# Summary: List all Python versions available to pungi
# Usage: pungi versions [--bare] [--skip-aliases]
#
# Lists all Python versions found in `$PUNGI_ROOT/versions/*'.

set -e
[ -n "$PUNGI_DEBUG" ] && set -x

unset bare
unset skip_aliases
# Provide pungi completions
for arg; do
  case "$arg" in
  --complete )
    echo --bare
    echo --skip-aliases
    exit ;;
  --bare ) bare=1 ;;
  --skip-aliases ) skip_aliases=1 ;;
  * )
    pungi-help --usage versions >&2
    exit 1
    ;;
  esac
done

versions_dir="${PUNGI_ROOT}/versions"

if ! enable -f "${BASH_SOURCE%/*}"/pungi-realpath.dylib realpath 2>/dev/null; then
  if [ -n "$PUNGI_NATIVE_EXT" ]; then
    echo "pungi: failed to load \`realpath' builtin" >&2
    exit 1
  fi

  READLINK=$(type -P greadlink readlink | head -1)
  if [ -z "$READLINK" ]; then
    echo "pungi: cannot find readlink - are you missing GNU coreutils?" >&2
    exit 1
  fi

  resolve_link() {
    $READLINK "$1"
  }

  realpath() {
    local path="$1"
    local name

    # Use a subshell to avoid changing the current path
    (
    while [ -n "$path" ]; do
      name="${path##*/}"
      [ "$name" = "$path" ] || cd "${path%/*}"
      path="$(resolve_link "$name" || true)"
    done

    echo "${PWD}/$name"
    )
  }
fi

if [ -d "$versions_dir" ]; then
  versions_dir="$(realpath "$versions_dir")"
fi

if ((${BASH_VERSINFO[0]} > 3)); then
  declare -A current_versions
else
  current_versions=()
fi
if [ -n "$bare" ]; then
  hit_prefix=""
  miss_prefix=""
  include_system=""
else
  hit_prefix="* "
  miss_prefix="  "
  OLDIFS="$IFS"
  IFS=:
  if ((${BASH_VERSINFO[0]} > 3)); then
    for i in $(pungi-version-name || true); do
      current_versions["$i"]="1"
    done
  else
    current_versions=($(pungi-version-name || true))
  fi
  IFS="$OLDIFS"
  include_system="1"
fi

num_versions=0

exists() {
  local car="$1"
  local cdar
  shift
  for cdar in "$@"; do
    if [ "${car}" == "${cdar}" ]; then
      return 0
    fi
  done
  return 1
}

print_version() {
  if [[ ${BASH_VERSINFO[0]} -ge 4 && ${current_versions["$1"]} ]]; then
    echo "${hit_prefix}$1$2 (set by $(pungi-version-origin))"
  elif (( ${BASH_VERSINFO[0]} <= 3 )) && exists "$1" "${current_versions[@]}"; then
    echo "${hit_prefix}$1$2 (set by $(pungi-version-origin))"
  else
    echo "${miss_prefix}$1$2"
  fi
  num_versions=$((num_versions + 1))
}

# Include "system" in the non-bare output, if it exists
if [ -n "$include_system" ] && \
	(PUNGI_VERSION=system pungi-which python >/dev/null 2>&1 || \
	PUNGI_VERSION=system pungi-which python3 >/dev/null 2>&1 || \
	PUNGI_VERSION=system pungi-which python2 >/dev/null 2>&1) ; then

		VER=$( python --version 2>/dev/null )
		if [[ ! -z $VER ]]; then
			print_version system "-${VER:7}"
		else

			VER=$( python3 --version 2>/dev/null )
			if [[ ! -z $VER ]]; then
				print_version system "-${VER:7}"
			else

				VER=$( python2 --version 2>/dev/null )
				if [[ ! -z $VER ]]; then
					print_version system "-${VER:7}"
				fi
			fi
		fi
fi

shopt -s dotglob nullglob
for path in "$versions_dir"/*; do
  if [ -d "$path" ]; then
    if [ -n "$skip_aliases" ] && [ -L "$path" ]; then
      target="$(realpath "$path")"
      [ "${target%/*}" != "$versions_dir" ] || continue
      [ "${target%/*/envs/*}" != "$versions_dir" ] || continue
    fi
    print_version "${path##*/}"
    # virtual environments created by anaconda/miniconda
    for env_path in "${path}/envs/"*; do
      if [ -d "${env_path}" ]; then
        print_version "${env_path#${PUNGI_ROOT}/versions/}"
      fi
    done
  fi
done
shopt -u dotglob nullglob

if [ "$num_versions" -eq 0 ] && [ -n "$include_system" ]; then
  echo "Warning: no Python detected on the system" >&2
  exit 1
fi
