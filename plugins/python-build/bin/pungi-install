#!/usr/bin/env bash
#
# Summary: Install a Python version using python-build
#
# Usage: pungi install [-f] [-kvp] <version>
#        pungi install [-f] [-kvp] <definition-file>
#        pungi install -l|--list
#        pungi install --version
#
#   -l/--list          List all available versions
#   -f/--force         Install even if the version appears to be installed already
#   -s/--skip-existing Skip if the version appears to be installed already
#
#   python-build options:
#
#   -k/--keep          Keep source tree in $PUNGI_BUILD_ROOT after installation
#                      (defaults to $PUNGI_ROOT/sources)
#   -p/--patch         Apply a patch from stdin before building
#   -v/--verbose       Verbose mode: print compilation status to stdout
#   --version          Show version of python-build
#   -g/--debug         Build a debug version
#
# For detailed information on installing Python versions with
# python-build, including a list of environment variables for adjusting
# compilation, see: https://github.com/pyenv/pyenv#readme
#
set -e
[ -n "$PUNGI_DEBUG" ] && set -x

# Add `share/python-build/` directory from each pungi plugin to the list of
# paths where build definitions are looked up.
shopt -s nullglob
for plugin_path in "$PUNGI_ROOT"/plugins/*/share/python-build; do
  PYTHON_BUILD_DEFINITIONS="${PYTHON_BUILD_DEFINITIONS}:${plugin_path}"
done
export PYTHON_BUILD_DEFINITIONS
shopt -u nullglob

# Provide pungi completions
if [ "$1" = "--complete" ]; then
  echo --list
  echo --force
  echo --skip-existing
  echo --keep
  echo --patch
  echo --verbose
  echo --version
  echo --debug
  exec python-build --definitions
fi

# Load shared library functions
eval "$(python-build --lib)"

usage() {
  pungi-help install 2>/dev/null
  [ -z "$1" ] || exit "$1"
}

definitions() {
  local query="$1"
  python-build --definitions | $(type -P ggrep grep | head -1) -F "$query" || true
}

indent() {
  sed 's/^/  /'
}

unset FORCE
unset SKIP_EXISTING
unset KEEP
unset VERBOSE
unset HAS_PATCH
unset DEBUG

parse_options "$@"
for option in "${OPTIONS[@]}"; do
  case "$option" in
  "h" | "help" )
    usage 0
    ;;
  "l" | "list" )
    echo "Available versions:"
    definitions | indent
    exit
    ;;
  "f" | "force" )
    FORCE=true
    ;;
  "s" | "skip-existing" )
    SKIP_EXISTING=true
    ;;
  "k" | "keep" )
    [ -n "${PUNGI_BUILD_ROOT}" ] || PUNGI_BUILD_ROOT="${PUNGI_ROOT}/sources"
    ;;
  "v" | "verbose" )
    VERBOSE="-v"
    ;;
  "p" | "patch" )
    HAS_PATCH="-p"
    ;;
  "g" | "debug" )
    DEBUG="-g"
    ;;
  "version" )
    exec python-build --version
    ;;
  * )
    usage 1 >&2
    ;;
  esac
done

[ "${#ARGUMENTS[@]}" -le 1 ] || usage 1 >&2

unset VERSION_NAME

# The first argument contains the definition to install. If the
# argument is missing, try to install whatever local app-specific
# version is specified by pungi. Show usage instructions if a local
# version is not specified.
DEFINITION="${ARGUMENTS[0]}"
[ -n "$DEFINITION" ] || DEFINITION="$(pungi-local 2>/dev/null || true)"
[ -n "$DEFINITION" ] || usage 1 >&2

# Define `before_install` and `after_install` functions that allow
# plugin hooks to register a string of code for execution before or
# after the installation process.
declare -a before_hooks after_hooks

before_install() {
  local hook="$1"
  before_hooks["${#before_hooks[@]}"]="$hook"
}

after_install() {
  local hook="$1"
  after_hooks["${#after_hooks[@]}"]="$hook"
}

OLDIFS="$IFS"
IFS=$'\n' scripts=(`pungi-hooks install`)
IFS="$OLDIFS"
for script in "${scripts[@]}"; do source "$script"; done


# Set VERSION_NAME from $DEFINITION, if it is not already set. Then
# compute the installation prefix.
[ -n "$VERSION_NAME" ] || VERSION_NAME="${DEFINITION##*/}"
[ -n "$DEBUG" ] && VERSION_NAME="${VERSION_NAME}-debug"
PREFIX="${PUNGI_ROOT}/versions/${VERSION_NAME}"

[ -d "${PREFIX}" ] && PREFIX_EXISTS=1

# If the installation prefix exists, prompt for confirmation unless
# the --force option was specified.
if [ -d "${PREFIX}/bin" ]; then
  if [ -z "$FORCE" ] && [ -z "$SKIP_EXISTING" ]; then
    echo "pungi: $PREFIX already exists" >&2
    read -p "continue with installation? (y/N) "

    case "$REPLY" in
    y | Y | yes | YES ) ;;
    * ) exit 1 ;;
    esac
  elif [ -n "$SKIP_EXISTING" ]; then
    # Since we know the python version is already installed, and are opting to
    # not force installation of existing versions, we just `exit 0` here to
    # leave things happy
    exit 0
  fi
fi

# If PUNGI_BUILD_ROOT is set, always pass keep options to python-build.
if [ -n "${PUNGI_BUILD_ROOT}" ]; then
  export PYTHON_BUILD_BUILD_PATH="${PUNGI_BUILD_ROOT}/${VERSION_NAME}"
  KEEP="-k"
fi

# Set PYTHON_BUILD_CACHE_PATH to $PUNGI_ROOT/cache, if the directory
# exists and the variable is not already set.
if [ -z "${PYTHON_BUILD_CACHE_PATH}" ] && [ -d "${PUNGI_ROOT}/cache" ]; then
  export PYTHON_BUILD_CACHE_PATH="${PUNGI_ROOT}/cache"
fi

if [ -z "${PUNGI_BOOTSTRAP_VERSION}" ]; then
  case "${VERSION_NAME}" in
  [23]"."* )
    # Default PUNGI_VERSION to the friendly Python version. (The
    # CPython installer requires an existing Python installation to run. An
    # unsatisfied local .python-version file can cause the installer to
    # fail.)
    for version_info in "${VERSION_NAME%-dev}" "${VERSION_NAME%.*}" "${VERSION_NAME%%.*}"; do
      # Anaconda's `curl` doesn't work on platform where `/etc/pki/tls/certs/ca-bundle.crt` isn't available (e.g. Debian)
      for version in $(pungi-whence "python${version_info}" 2>/dev/null || true); do
        if [[ "${version}" != "anaconda"* ]] && [[ "${version}" != "miniconda"* ]]; then
          PUNGI_BOOTSTRAP_VERSION="${version}"
          break 2
        fi
      done
    done
    ;;
  "pypy"*"-dev" | "pypy"*"-src" )
    # PyPy/PyPy3 requires existing Python 2.7 to build
    if [ -n "${PUNGI_RPYTHON_VERSION}" ]; then
      PUNGI_BOOTSTRAP_VERSION="${PUNGI_RPYTHON_VERSION}"
    else
      for version in $(pungi-versions --bare | sort -r); do
        if [[ "${version}" == "2.7"* ]]; then
          PUNGI_BOOTSTRAP_VERSION="$version"
          break
        fi
      done
    fi
    if [ -n "$PUNGI_BOOTSTRAP_VERSION" ]; then
      for dep in curses genc pycparser; do
        if ! PUNGI_VERSION="$PUNGI_BOOTSTRAP_VERSION" pungi-exec python -c "import ${dep}" 1>/dev/null 2>&1; then
          echo "pungi-install: $VERSION_NAME: PyPy requires \`${dep}' in $PUNGI_BOOTSTRAP_VERSION to build from source." >&2
          exit 1
        fi
      done
    else
      echo "pungi-install: $VERSION_NAME: PyPy requires Python 2.7 to build from source." >&2
      exit 1
    fi
    ;;
  esac
fi

if [ -n "${PUNGI_BOOTSTRAP_VERSION}" ]; then
  export PUNGI_VERSION="${PUNGI_BOOTSTRAP_VERSION}"
fi

# Execute `before_install` hooks.
for hook in "${before_hooks[@]}"; do eval "$hook"; done

# Plan cleanup on unsuccessful installation.
cleanup() {
  [ -z "${PREFIX_EXISTS}" ] && rm -rf "$PREFIX"
}

trap cleanup SIGINT

# Invoke `python-build` and record the exit status in $STATUS.
STATUS=0
python-build $KEEP $VERBOSE $HAS_PATCH $DEBUG "$DEFINITION" "$PREFIX" || STATUS="$?"

# Display a more helpful message if the definition wasn't found.
if [ "$STATUS" == "2" ]; then
  { candidates="$(definitions "$DEFINITION")"
    here="$(dirname "${0%/*}")/../.."
    if [ -n "$candidates" ]; then
      echo
      echo "The following versions contain \`$DEFINITION' in the name:"
      echo "$candidates" | indent
    fi
    echo
    echo "See all available versions with \`pungi install --list'."
    echo
    echo -n "If the version you need is missing, try upgrading pungi"
    if [ "$here" != "${here#$(brew --prefix 2>/dev/null)}" ]; then
      printf ":\n\n"
      echo "  brew update && brew upgrade pungi"
    elif [ -d "${here}/.git" ]; then
      printf ":\n\n"
      echo "  cd ${here} && git pull && cd -"
    else
      printf ".\n"
    fi
  } >&2
fi

# Execute `after_install` hooks.
for hook in "${after_hooks[@]}"; do eval "$hook"; done

# Run `pungi-rehash` after a successful installation.
if [ "$STATUS" == "0" ]; then
  pungi-rehash
else
  cleanup
fi

exit "$STATUS"
